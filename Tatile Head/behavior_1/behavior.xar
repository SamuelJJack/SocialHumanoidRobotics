<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.ald.softbankrobotics.com/schema/choregraphe/project.xsd" xar_version="3">
  <Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0">
    <bitmap>media/images/box/root.png</bitmap>
    <script language="4">
      <content>
        <![CDATA[]]>
      </content>
    </script>
    <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
    <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
    <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
    <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
    <Timeline enable="0">
      <BehaviorLayer name="behavior_layer1">
        <BehaviorKeyframe name="keyframe1" index="1">
          <Diagram>
            <Box name="Tactile Head" id="1" localization="8" tooltip="Detect touch on head tactile sensor." x="115" y="51">
              <bitmap>media/images/box/sensors/tactileHead.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
            self.onStopped() #~ activate output of the box
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Input name="FrontTactilTouched" type="0" type_size="1" nature="4" stm_value_name="FrontTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="4" />
              <Input name="MiddleTactilTouched" type="0" type_size="1" nature="4" stm_value_name="MiddleTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="5" />
              <Input name="RearTactilTouched" type="0" type_size="1" nature="4" stm_value_name="RearTactilTouched" inner="1" tooltip="Connected to ALMemory. Will be stimulated every time the value subscribed to changes, respecting the refresh period." id="6" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is stopped." id="7" />
              <Output name="frontTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The front tactile head sensor was touched." id="8" />
              <Output name="middleTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The middle tactile head sensor was touched." id="9" />
              <Output name="rearTouched" type="1" type_size="1" nature="2" inner="0" tooltip="The rear tactile head sensor was touched." id="10" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="If &gt; 0" id="1" localization="8" tooltip="Transmit only if value is &gt; 0." x="260" y="17">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="If &gt; 0" id="2" localization="8" tooltip="Transmit only if value is &gt; 0." x="256" y="119">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Box name="If &gt; 0" id="3" localization="8" tooltip="Transmit only if value is &gt; 0." x="261" y="223">
                        <bitmap>media/images/box/box-diagram.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self, p):
        if(p > 0):
            self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is usually a good idea to call onUnload of this box in a onStop method, as the code written in onUnload is used to finish the working of the box as well
        pass]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" />
                      <Link inputowner="0" indexofinput="8" outputowner="1" indexofoutput="4" />
                      <Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="5" />
                      <Link inputowner="0" indexofinput="9" outputowner="2" indexofoutput="4" />
                      <Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="6" />
                      <Link inputowner="0" indexofinput="10" outputowner="3" indexofoutput="4" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="Head-sequence" type="Lock" timeout="0" />
            </Box>
            <Box name="Wipe Forehead" id="2" localization="8" tooltip="This box makes the robot wipe his forehead." x="288" y="52">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self, False)

	def onUnload(self):
		#puts code for box cleanup here
		""

	def onInput_onStart(self):
		#self.onStopped() # activate output of the box
		""

	def onInput_onStop(self):
		""]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="127">
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                    <Key frame="24" value="-13.4498" />
                    <Key frame="42" value="-35.6864" />
                    <Key frame="82" value="-6.50639" />
                    <Key frame="99" value="-0.353971" />
                    <Key frame="113" value="-1.58446" />
                    <Key frame="127" value="-2.11181" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                    <Key frame="24" value="-1.49656" />
                    <Key frame="42" value="24.5194" />
                    <Key frame="82" value="17.6638" />
                    <Key frame="99" value="6.41369" />
                    <Key frame="113" value="-0.79343" />
                    <Key frame="127" value="3.51326" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                    <Key frame="20" value="49.4806" />
                    <Key frame="38" value="49.217" />
                    <Key frame="78" value="50.8869" />
                    <Key frame="95" value="53.26" />
                    <Key frame="109" value="58.2698" />
                    <Key frame="123" value="55.9846" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                    <Key frame="20" value="16.4333" />
                    <Key frame="38" value="13.1814" />
                    <Key frame="78" value="11.5993" />
                    <Key frame="95" value="23.2889" />
                    <Key frame="109" value="20.6522" />
                    <Key frame="123" value="18.2791" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                    <Key frame="20" value="-54.8468" />
                    <Key frame="38" value="-47.2003" />
                    <Key frame="78" value="-57.7473" />
                    <Key frame="95" value="-53.0011" />
                    <Key frame="109" value="-71.2826" />
                    <Key frame="123" value="-55.0226" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                    <Key frame="20" value="-49.6564" />
                    <Key frame="38" value="-49.7443" />
                    <Key frame="78" value="-47.1076" />
                    <Key frame="95" value="-56.8635" />
                    <Key frame="109" value="-55.3694" />
                    <Key frame="123" value="-56.7757" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                    <Key frame="38" value="22.1463" />
                    <Key frame="78" value="22.1463" />
                    <Key frame="95" value="22.1463" />
                    <Key frame="123" value="22.1463" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                    <Key frame="38" value="0.132026" />
                    <Key frame="78" value="0.132026" />
                    <Key frame="95" value="0.132026" />
                    <Key frame="123" value="0.132026" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                    <Key frame="16" value="4.39699" />
                    <Key frame="34" value="-34.0996" />
                    <Key frame="74" value="-49.6564" />
                    <Key frame="91" value="-35.1543" />
                    <Key frame="105" value="33.4892" />
                    <Key frame="119" value="50.5401" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                    <Key frame="16" value="-1.145" />
                    <Key frame="34" value="-1.145" />
                    <Key frame="74" value="-35.247" />
                    <Key frame="91" value="-47.7276" />
                    <Key frame="105" value="-12.8346" />
                    <Key frame="119" value="-12.3072" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                    <Key frame="16" value="-7.38531" />
                    <Key frame="34" value="-16.3503" />
                    <Key frame="74" value="-8.96736" />
                    <Key frame="91" value="43.2403" />
                    <Key frame="105" value="67.1469" />
                    <Key frame="119" value="38.8457" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                    <Key frame="16" value="73.392" />
                    <Key frame="34" value="80.0718" />
                    <Key frame="74" value="90.0914" />
                    <Key frame="91" value="71.1068" />
                    <Key frame="105" value="70.2279" />
                    <Key frame="119" value="48.1671" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                    <Key frame="34" value="-3.34229" />
                    <Key frame="74" value="-2.99072" />
                    <Key frame="91" value="-3.86964" />
                    <Key frame="119" value="-2.1997" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                    <Key frame="34" value="0.166571" />
                    <Key frame="74" value="0.166208" />
                    <Key frame="91" value="0.166571" />
                    <Key frame="119" value="0.166208" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHipYawPitch" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="LHipRoll" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="LHipPitch" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="LKneePitch" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="LAnklePitch" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="LAnkleRoll" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="RHipRoll" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="RHipPitch" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="RKneePitch" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="RAnklePitch" mute="1" unit="-1" />
                  <ActuatorCurve name="value" actuator="RAnkleRoll" mute="1" unit="-1" />
                </ActuatorList>
              </Timeline>
              <Resource name="Head" type="Lock" timeout="0" />
              <Resource name="Arms" type="Lock" timeout="0" />
            </Box>
            <Box name="Say" id="3" localization="8" tooltip="Say some text. Note that you must open the box to enter the text." x="291" y="152">
              <bitmap>media/images/box/interaction/say.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" />
              <Parameter name="Voice shaping (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean.' id="5" />
              <Parameter name="Speed (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed.&#x0A;&#x0A;!Warning! This feature is not available yet in Japanese, Chinese and Korean." id="6" />
              <Timeline enable="0">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="keyframe1" index="1">
                    <Diagram>
                      <Box name="Say Text" id="2" localization="8" tooltip="Say the text received on its input." x="422" y="65">
                        <bitmap>media/images/box/interaction/say.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy('ALTextToSpeech')
        self.ttsStop = ALProxy('ALTextToSpeech', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.ttsStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            sentence = "\RSPD="+ str( self.getParameter("Speed (%)") ) + "\ "
            sentence += "\VCT="+ str( self.getParameter("Voice shaping (%)") ) + "\ "
            sentence += str(p)
            sentence +=  "\RST\ "
            id = self.tts.post.say(str(sentence))
            self.ids.append(id)
            self.tts.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
                        <Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" />
                        <Parameter name="Voice shaping (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="150" tooltip='Used to modify at runtime the voice feature (tone, speed). In a slighty&#x0A;different way than pitch and speed, it gives a kind of &quot;gender or age&#x0A;modification&quot; effect.&#x0A;&#x0A;For instance, a quite good male derivation of female voice can be&#x0A;obtained setting this parameter to 78%.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the&#x0A;speed parameter. For example, if you want to decrease by 20% the voice&#x0A;shaping, you will have to increase by 20% the speed to keep a constant&#x0A;average speed.' id="5" />
                        <Parameter name="Speed (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="50" max="200" tooltip="Changes the speed of the voice.&#x0A;&#x0A;Note: For a better effect, you can compensate this parameter with the voice&#x0A;shaping parameter. For example, if you want to increase by 20% the speed, you&#x0A;will have to decrease by 20% the voice shaping to keep a constant average&#x0A;speed." id="6" />
                      </Box>
                      <Box name="Localized Text" id="5" localization="8" tooltip="Send on the output the text associated with the robot&apos;s current voice language.&#x0A;You can display and edit the text associated with any language by&#x0A;selecting the language in the combobox.&#x0A;&#x0A;!!Warning!! The text sent on the output is NOT the displayed one but the one&#x0A;associated with the robot&apos;s current voice language." plugin="localizationbox_plugin" x="114" y="68">
                        <bitmap>media/images/box/interaction/vocabulary.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[# /!\ Generated content. Do not edit!
class MyClass(GeneratedClass):
	def __init__(self):
		try: # disable autoBind
			GeneratedClass.__init__(self, False)
		except TypeError: # if NAOqi < 1.14
			GeneratedClass.__init__( self )

		self.sentences = {
			"Arabic" : " مرحبا ",
			"Czech" : " Ahoj ",
			"Danish" : " Hej ",
			"German" : " Hallo ",
			"Greek" : "  ",
			"English" : " Hello My name is Jeff\n ",
			"Spanish" : " Hola ",
			"Finnish" : " Hei ",
			"French" : " Bonjour ",
			"Italian" : " Ciao ",
			"Japanese" : " こんにちは ",
			"Korean" : " 안녕하세요 ",
			"Dutch" : " Hallo ",
			"Norwegian" : "  ",
			"Polish" : " Cześć ",
			"Brazilian" : " Olá ",
			"Portuguese" : " Olá ",
			"Russian" : " Привет ",
			"Swedish" : " Hallå ",
			"Turkish" : " Merhaba ",
			"Chinese" : "  ",
		}

	def onLoad(self):
		self.tts = self.session().service("ALTextToSpeech")

	def onInput_onStart(self):
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(self.sentences[sDefaultLang])]]>
                          </content>
                        </script>
                        <pluginContent>
                          <arabic uiName="‎اللغة العربية (Arabic)" languageName="Arabic">
                            <![CDATA[مرحبا]]>
                          </arabic>
                          <czech uiName="‎Český Jazyk (Czech)" languageName="Czech">
                            <![CDATA[Ahoj]]>
                          </czech>
                          <danish uiName="‎Dansk (Danish)" languageName="Danish">
                            <![CDATA[Hej]]>
                          </danish>
                          <german uiName="‎Deutsch (German)" languageName="German">
                            <![CDATA[Hallo]]>
                          </german>
                          <greek uiName="‎Ελληνικά (Greek)" languageName="Greek">
                            <![CDATA[]]>
                          </greek>
                          <english uiName="‎American English (American English)" languageName="English">
                            <![CDATA[Hello My name is Jeff
]]>
                          </english>
                          <spanish uiName="‎Español (Spanish)" languageName="Spanish">
                            <![CDATA[Hola]]>
                          </spanish>
                          <finnish uiName="‎Suomi (Finnish)" languageName="Finnish">
                            <![CDATA[Hei]]>
                          </finnish>
                          <french uiName="‎Français (French)" languageName="French">
                            <![CDATA[Bonjour]]>
                          </french>
                          <italian uiName="‎Italiano (Italian)" languageName="Italian">
                            <![CDATA[Ciao]]>
                          </italian>
                          <japanese uiName="‎日本語 (Japanese)" languageName="Japanese">
                            <![CDATA[こんにちは]]>
                          </japanese>
                          <korean uiName="‎한국어 (Korean)" languageName="Korean">
                            <![CDATA[안녕하세요]]>
                          </korean>
                          <dutch uiName="‎Nederlands (Dutch)" languageName="Dutch">
                            <![CDATA[Hallo]]>
                          </dutch>
                          <norwegian uiName="‎Norsk (Norwegian)" languageName="Norwegian">
                            <![CDATA[]]>
                          </norwegian>
                          <polish uiName="‎Język polski (Polish)" languageName="Polish">
                            <![CDATA[Cześć]]>
                          </polish>
                          <brazilian uiName="‎Português do Brasil (Brazilian)" languageName="Brazilian">
                            <![CDATA[Olá]]>
                          </brazilian>
                          <portuguese uiName="‎Português (Portuguese)" languageName="Portuguese">
                            <![CDATA[Olá]]>
                          </portuguese>
                          <russian uiName="‎Русский (Russian)" languageName="Russian">
                            <![CDATA[Привет]]>
                          </russian>
                          <swedish uiName="‎Svenska (Swedish)" languageName="Swedish">
                            <![CDATA[Hallå]]>
                          </swedish>
                          <turkish uiName="‎Türkçe (Turkish)" languageName="Turkish">
                            <![CDATA[Merhaba]]>
                          </turkish>
                          <chinese uiName="‎普通话 (Mandarin Chinese)" languageName="Chinese">
                            <![CDATA[]]>
                          </chinese>
                          <language>english</language>
                        </pluginContent>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Data is sent on the output when this input is stimulated." id="2" />
                        <Output name="onStopped" type="3" type_size="1" nature="1" inner="0" tooltip="Data sent when asked." id="3" />
                      </Box>
                      <Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" />
                      <Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="2" />
                      <Link inputowner="2" indexofinput="2" outputowner="5" indexofoutput="3" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
              </Timeline>
              <Resource name="Speech" type="Lock" timeout="0" />
            </Box>
            <Box name="Hello" id="4" localization="8" tooltip="Simple hello animation.&#x0A;&#x0A;!!Warning!! There is no speech in this box. It is a just an animation box with some&#x0A;leds animation." x="299" y="269">
              <bitmap>media/images/box/movement/move.png</bitmap>
              <script language="4">
                <content>
                  <![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        #~ self.onStopped() #~ activate output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #~ it is recommanded to call onUnload of this box in a onStop method, as the code written in onUnload is used to stop the box as well
        pass]]>
                </content>
              </script>
              <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" />
              <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
              <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
              <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
              <Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="115">
                <BehaviorLayer name="behavior_layer1">
                  <BehaviorKeyframe name="FaceLeds" index="1">
                    <Diagram>
                      <Box name="Light_AskForAttentionEyes" id="1" localization="8" tooltip="Set an animated gaze which calls for attention (purple eyes).&#x0A;&#x0A;Note: It is a never ending box. You must call onStop to stop it.&#x0A;&#x0A;*** state: 5a_release ***&#x0A;*** ref box in: 5a_release\Leds\Light_AskForAttentionEyes\Light_AskForAttentionEyes.xar ***&#x0A;*** last modification date(svn): Version it! ***" x="281" y="144">
                        <bitmap>media/images/box/interaction/LED.png</bitmap>
                        <script language="4">
                          <content>
                            <![CDATA[class MyClass(GeneratedClass):
  def __init__(self):
    GeneratedClass.__init__(self, False)

  def onLoad(self):
    self.bIsRunning = False;
    self.leds = ALProxy("ALLeds")

  def onUnload(self):
    self.onInput_onStop(); # will stop current loop execution

  def onInput_onStart(self):
    #self.logger.info( self.getName() + ": start - begin" );

    if( self.bIsRunning ):
      #print( self.getName() + ": already started => nothing" );
      return;

    self.bIsRunning = True;
    self.bMustStop = False;

    rDuration = 0.2;
    self.leds.post.fadeRGB( "FaceLedsTop", 0xff00ff, rDuration );
    self.leds.post.fadeRGB( "FaceLedsInternal", 0xff00ff, rDuration );
    self.leds.post.fadeRGB( "FaceLedsBottom", 0xff00ff, rDuration );
    self.leds.fadeRGB( "FaceLedsExternal", 0xff00ff, rDuration );

    while( not self.bMustStop ):
      rTime = 0.1;
      self.leds.post.fadeRGB( "FaceLedsTop", 0xffffff, rTime );
      self.leds.fadeRGB( "FaceLedsBottom", 0xffffff, rTime );
      if( self.bMustStop ):
        break;
      rTime = 0.3
      self.leds.post.fadeRGB( "FaceLedsTop", 0xff00ff, rTime );
      self.leds.fadeRGB( "FaceLedsBottom", 0xff00ff, rTime );


    # end while
    self.bIsRunning = False;
    self.onStopped();

  def onInput_onStop(self):
    self.bMustStop = True; # will stop current loop execution]]>
                          </content>
                        </script>
                        <Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" />
                        <Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" />
                        <Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" />
                        <Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" />
                      </Box>
                      <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" />
                    </Diagram>
                  </BehaviorKeyframe>
                </BehaviorLayer>
                <ActuatorList model="nao">
                  <ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="-1">
                    <Key frame="20" value="-7.73688" />
                    <Key frame="39" value="-20.1296" />
                    <Key frame="56" value="-23.8211" />
                    <Key frame="70" value="-23.9968" />
                    <Key frame="87" value="-29.7977" />
                    <Key frame="115" value="-21.5359" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="-1">
                    <Key frame="20" value="16.9607" />
                    <Key frame="39" value="-9.75839" />
                    <Key frame="56" value="-19.5144" />
                    <Key frame="70" value="-3.43018" />
                    <Key frame="87" value="-11.0768" />
                    <Key frame="115" value="-0.617646" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="-1">
                    <Key frame="18" value="64.0707" />
                    <Key frame="37" value="53.1721" />
                    <Key frame="54" value="53.8752" />
                    <Key frame="68" value="49.3927" />
                    <Key frame="85" value="51.4143" />
                    <Key frame="113" value="48.2502" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="-1">
                    <Key frame="18" value="20.8279" />
                    <Key frame="37" value="13.0056" />
                    <Key frame="54" value="11.6872" />
                    <Key frame="68" value="12.4782" />
                    <Key frame="85" value="14.2361" />
                    <Key frame="113" value="13.0056" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="-1">
                    <Key frame="18" value="-46.0577" />
                    <Key frame="37" value="-39.6416" />
                    <Key frame="54" value="-38.9384" />
                    <Key frame="68" value="-34.9833" />
                    <Key frame="85" value="-43.1572" />
                    <Key frame="113" value="-38.4111" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="-1">
                    <Key frame="18" value="-79.0123" />
                    <Key frame="37" value="-73.9145" />
                    <Key frame="54" value="-67.7621" />
                    <Key frame="68" value="-71.5415" />
                    <Key frame="85" value="-75.5845" />
                    <Key frame="113" value="-67.85" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="-1">
                    <Key frame="37" value="8.4352" />
                    <Key frame="113" value="6.85315" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="LHand" mute="0" unit="-1">
                    <Key frame="37" value="0.238207" />
                    <Key frame="113" value="0.240025" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="-1">
                    <Key frame="16" value="14.153" />
                    <Key frame="35" value="-67.1469" />
                    <Key frame="52" value="-62.4007" />
                    <Key frame="66" value="-72.2446" />
                    <Key frame="83" value="-65.8285" />
                    <Key frame="111" value="58.4504" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="-1">
                    <Key frame="16" value="-13.8893" />
                    <Key frame="35" value="-54.6711" />
                    <Key frame="52" value="-26.3699" />
                    <Key frame="66" value="-55.0226" />
                    <Key frame="83" value="-18.8112" />
                    <Key frame="111" value="-14.3288" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="-1">
                    <Key frame="16" value="-17.9323" />
                    <Key frame="35" value="32.3418" />
                    <Key frame="52" value="22.41" />
                    <Key frame="66" value="19.949" />
                    <Key frame="83" value="21.8826" />
                    <Key frame="93" value="56" />
                    <Key frame="111" value="47.3712" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="-1">
                    <Key frame="16" value="79.3686" />
                    <Key frame="35" value="13.8893" />
                    <Key frame="42" value="20" />
                    <Key frame="52" value="53.5285" />
                    <Key frame="60" value="39" />
                    <Key frame="66" value="11" />
                    <Key frame="76" value="15" />
                    <Key frame="83" value="40.5205" />
                    <Key frame="93" value="58.4" />
                    <Key frame="111" value="72.5131" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="-1">
                    <Key frame="35" value="-17.9323" />
                    <Key frame="83" value="-17.405" />
                    <Key frame="111" value="10.4567" />
                  </ActuatorCurve>
                  <ActuatorCurve name="value" actuator="RHand" mute="0" unit="-1">
                    <Key frame="35" value="0.853478" />
                    <Key frame="83" value="0.854933" />
                    <Key frame="111" value="0.425116" />
                  </ActuatorCurve>
                </ActuatorList>
              </Timeline>
              <Resource name="Head" type="Lock" timeout="0" />
              <Resource name="Arms" type="Lock" timeout="0" />
              <Resource name="Left eye leds" type="Lock" timeout="0" />
              <Resource name="Right eye leds" type="Lock" timeout="0" />
            </Box>
            <Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" />
            <Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="8" />
            <Link inputowner="3" indexofinput="2" outputowner="1" indexofoutput="9" />
            <Link inputowner="4" indexofinput="2" outputowner="1" indexofoutput="10" />
          </Diagram>
        </BehaviorKeyframe>
      </BehaviorLayer>
    </Timeline>
  </Box>
</ChoregrapheProject>
